{
  "NameModelTypeClass": "self.content = self.content.replace(\"{[NameModelTypeClass]}\",self.get_upper_camel_content(model.p('name')))\n",
  "NameModelPluralTypeClass": "self.content = self.content.replace(\"{[NameModelPluralTypeClass]}\",self.get_upper_camel_content(model.p('plural-name')))\n",
  "NameModelLowerCamelCase": "self.content = self.content.replace(\"{[NameModelLowerCamelCase]}\",self.get_lower_camel_content(model.p('name')))\n",
  "NameModelUpperSnakecase": "_name = model.p('name').upper()\nself.content = self.content.replace(\"{[NameModelUpperSnakecase]}\",_name)\n",
  "CompanyName": "_name = model.p('company').lower()\nself.content = self.content.replace(\"{[CompanyName]}\",_name)\n",
  "Table": "_name = model.p('table')\nself.content = self.content.replace(\"{[Table]}\",_name)\n",
  "PersistencePropertyDefinitions": "attributes_code = []\n\nfor x in model.__dict__['attributes']:\n    prefix = f'\\n\\t@Id' if x.__dict__[\"column-name\"] == 'id' else ''\n    attribute_code = (\n        prefix+\n        f'\\n\\t@Column(name = \"{x.__dict__[\"column-name\"]}\")'\n        f'\\n\\tpublic {x.__dict__[\"type\"]} {self.get_lower_camel_content(x.__dict__[\"name\"])}'\n    )\n    attributes_code.append(attribute_code)\n\na = ';\\n  '.join(attributes_code) + ';'\n\nself.content = self.content.replace(\"{[PersistencePropertyDefinitions]}\", a)\n",
  "EntityAttributeDefinitions": "attributes_code = []\n\nfor x in model.__dict__['attributes']:\n    attribute_code = (\n        f'\\tpublic {x.__dict__[\"type\"]} {self.get_lower_camel_content(x.__dict__[\"name\"])}'\n    )\n    attributes_code.append(attribute_code)\n\na = ';\\n  '.join(attributes_code) + ';'\n\nself.content = self.content.replace(\"{[EntityAttributeDefinitions]}\", a)\n",
  "EntityAttributeParams": "attributes_code = []\n\nfor x in model.__dict__['attributes']:\n    attribute_code = (\n        f'\\n\\t{x.__dict__[\"type\"]} {self.get_lower_camel_content(x.__dict__[\"name\"])}'\n    )\n    attributes_code.append(attribute_code)\na = ', '.join(attributes_code)\n\nself.content = self.content.replace(\"{[EntityAttributeParams]}\", a)\n",
  "EntityAttributeAssing": "attributes_code = []\n\nfor x in model.__dict__['attributes']:\n    attribute_code = (\n        f'\\n\\tthis.{self.get_lower_camel_content(x.__dict__[\"name\"])} = {self.get_lower_camel_content(x.__dict__[\"name\"])}'\n    )\n    attributes_code.append(attribute_code)\n\na = '; '.join(attributes_code) + ';'\n\nself.content = self.content.replace(\"{[EntityAttributeAssing]}\", a)\n",
  "EntityAttributeGS": "attributes_code = []\n\nfor x in model.__dict__['attributes']:\n    attribute_code = (\n        f'\\n\\tpublic {x.__dict__[\"type\"]} get{self.get_upper_camel_content(x.__dict__[\"name\"])}(){{'\n        f'\\n\\t\\treturn {self.get_lower_camel_content(x.__dict__[\"name\"])};\\n\\t}}'\n        '\\n'\n        f'\\n\\tpublic void set{self.get_upper_camel_content(x.__dict__[\"name\"])}({x.__dict__[\"type\"]} {self.get_lower_camel_content(x.__dict__[\"name\"])}){{'\n        f'\\n\\t\\tthis.{self.get_lower_camel_content(x.__dict__[\"name\"])} = {self.get_lower_camel_content(x.__dict__[\"name\"])};\\n\\t}}\\n\\n'\n    )\n    attributes_code.append(attribute_code)\n\na = ''.join(attributes_code) + '\\n'\n\nself.content = self.content.replace(\"{[EntityAttributeGS]}\", a)\n",

  "Folder": "self.content = self.content.replace(\"{[Folder]}\",model.p('folder'))\n",
  "NameWidgetTypeFile": "self.content = self.content.replace(\"{[NameWidgetTypeFile]}\",model.p('widget-name'))\n",
  "NameWidgetTypeClass": "self.content = self.content.replace(\"{[NameWidgetTypeClass]}\",self.get_upper_camel_content(model.p('name')))\n",
  "NameModelTypeFile": "_name = model.p('name').lower()\nself.content = self.content.replace(\"{[NameModelTypeFile]}\",_name)\n",
  "ModelBasicViewModel": "self.content = self.content.replace(\"{[ModelBasicViewModel]}\",'')\n",
  "PropertyDefinitions": "from functools import reduce\na = reduce(lambda a,b : a+';\\n  '+b,list(map( lambda x: x.__dict__['name']+': '+x.__dict__['type'],model.__dict__['attributes'])))+';'\nself.content = self.content.replace(\"{[PropertyDefinitions]}\",a)\n",
  "MainPropertyDefinition": "self.content = self.content.replace(\"{[MainPropertyDefinition]}\",'id')\n",
  "PropertyMappers": "from functools import reduce\na = reduce(lambda a,b : a+',\\n      '+b,list(map( lambda x: x.__dict__['name']+': obj.'+x.__dict__['name'],model.__dict__['attributes'])))+','\nself.content = self.content.replace(\"{[PropertyMappers]}\",a)\n",
  "NameModelPluralTypeFile": "_name = model.p('plural-name').lower()\nself.content = self.content.replace(\"{[NameModelPluralTypeFile]}\",_name)\n"
}
